const { switchDB, getDBModel, autoNumberingSchemas } = require('../middlewares/switchDB');

class AutoNumberingService {
  constructor() { }

  getAllAutoNumberings = async (req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')
      return await autoNumbering.find({}).lean();
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };
  getAutoNumberingByType = async (data, req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')
      return await autoNumbering.findOne({ type: data.type });
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };
  createAutoNumberings = async (data, req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')
      return await autoNumbering.insertMany(data.autoNumberingData, { runValidators: true });
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };
  updateAutoNumbering = async (data, req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')
      return await autoNumbering.updateOne(
        { _id: data._id },
        { $set: data },
        { upsert: true }
      );
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };

  getNextSequence = async (data, req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')

      const autoNumberingData = await autoNumbering.findOne({
        type: new RegExp("^" + data.type + "$", "i"),
      }).lean();
      let nextSequence = null;
      if (autoNumberingData?.autoGenerated) {
        nextSequence = autoNumberingData.isAlphaNumeric
          ? autoNumberingData.isSuffix
            ? autoNumberingData.sequenceNumber + autoNumberingData.sequenceCode
            : autoNumberingData.sequenceCode + autoNumberingData.sequenceNumber
          : autoNumberingData.sequenceNumber;
      }
      return nextSequence?.toString();
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };
  updateSequence = async (data, req, res) => {
    try {
      const companyName = req.subdomain
      const DB = await switchDB(companyName, autoNumberingSchemas)
      const autoNumbering = await getDBModel(DB, 'autoNumbering')
      let autoNumberingData = await autoNumbering.findOne({
        type: new RegExp("^" + data.type + "$", "i"),
      }).lean();
      // autoNumberingData.sequenceNumber = autoNumberingData.sequenceNumber + 1;
      return await autoNumbering.updateOne(
        { _id: autoNumberingData._id },
        { $set: { sequenceNumber: autoNumberingData.sequenceNumber + 1 } },
        { upsert: true }
      );
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  };
}
module.exports = new AutoNumberingService();
