const DesignationService = require("../services/designationService");
const autoNumberingService = require("../services/autoNumberingService");

class Designation {
  constructor() {}

  findDesignationById = async (req, res, next) => {
    try {
      if (!req.params.id) throw new Error("Designation id is required.");
      let query = { id: req.params.id };
      // call method to service
      let result = await DesignationService.findDesignation(query, req);

      if (!result) {
        return res.status(404).send("Designation not found in the database");
      }
      return res.status(200).send(result);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };
  findDesignation = async (req, res, next) => {
    try {
      let query = {};
      if (req.query.isOneToOne != null) {
        query = { ...query, isOneToOne: req.query.isOneToOne };
      }
      if (req.query.status != null) {
        query = { ...query, status: req.query.status };
      }
      if (req.query.isCritical != null) {
        query = { ...query, isCritical: req.query.isCritical };
      }
      // call method to service
      let result = await DesignationService.findAllDesignationsByCondition(
        query,
        req
      );

      if (!result) {
        return res.status(404).send("Designation not found in the database");
      }
      return res.status(200).send(result);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };

  findAll = async (req, res, next) => {
    try {
      console.log("Find Designation, Data By: " + JSON.stringify(req.params));
      // call method to service
      let result = await DesignationService.findAll(req, res);

      if (!result) {
        return res.status(404).send("Designation not found in the database");
      }
      return res.status(200).send(result);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };

  findAllLite = async (req, res, next) => {
    try {
      console.log("Find Designation lite, Data By: " + JSON.stringify(req.params));
      // call method to service
      let result = await DesignationService.findWithProjection({}, req);

      if (!result) {
        return res.status(404).send("Designation not found in the database");
      }
      return res.status(200).send(result);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };

  createDesignation = async (req, res, next) => {
    try {
      console.log("Create Designation, Data By: " + JSON.stringify(req.body));
      let data = req.body;

      // call method to service
      let resp = await DesignationService.createDesignation(data, req, res);

      return res.status(200).send(resp);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };
  updateDesignation = async (req, res, next) => {
    try {
      console.log("Update Designation, Data By: " + JSON.stringify(req.body));
      let data = req.body;

      // call method to service
      let resp = await DesignationService.updateDesignation(data, req, res);

      return res.status(200).send(resp);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };
  
  generateCSVHeader = async (req, res, next) => {
    try {
      const autoNumberingData =
        await autoNumberingService.getAutoNumberingByType(
          { type: "DES" },
          req,
          res
        );
      let CSVHeader = [];
      if (!autoNumberingData?.autoGenerated) {
        CSVHeader.push({ label: "Designation_Id", key: "Designation_Id" });
      }
      CSVHeader.push(
        { label: "Designation_Name", key: "Designation_Name" },
        { label: "Job_Grade", key: "Job_Grade" },
        { label: "Job_Level", key: "Job_Level" },
        { label: "Is_One_To_One", key: "Is_One_To_One" },
        { label: "Is_Critical", key: "Is_Critical" },
        { label: "As_Of_Date(DD/MM/YYYY)", key: "As_Of_Date" }
      );
      const data = {
        CSVHeader: CSVHeader,
        autoNumberingData: autoNumberingData,
      };
      return res.status(200).send(data);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };

  createAllDesignations = async (req, res, next) => {
    try {
      let data = req.body;

      // call method to service
      let resp = await DesignationService.createAllDesignations(data, req, res);

      return res.status(200).send(resp);
    } catch (error) {
      console.error(error);
      res.status(400).send(error.message);
    }
  };
}

module.exports = new Designation();
