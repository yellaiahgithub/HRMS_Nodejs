var moment = require("moment"); // require

class LocationUtils {
  constructor() {}
  validateLocation = async (
    location,
    uploadingData,
    isAutoGeneratedLocationId,
    allDepartments,
    allLocations,
    currentLocationIndex
  ) => {
    let errors = [];

    if (!isAutoGeneratedLocationId) {
      if (location.locationId == null || location.locationId.length == 0) {
        errors.push("Location Id can not be empty.\n");
      } else {
        const existingLocationWithId = allLocations.find(
          (loc) => loc.locationId === location.locationId
        );
        const duplicateLocationWithId = uploadingData.find(
          (loc, index) =>
            loc.locationId === location.locationId &&
            currentLocationIndex != index
        );
        if (existingLocationWithId) {
          errors.push(
            "Location Id '" +
              location.locationId +
              "' already alloted to location '" +
              existingLocationWithId?.locationName +
              "'\n"
          );
        }
        if (duplicateLocationWithId) {
          errors.push(
            "Duplicate Location Id '" +
              location.locationId +
              "' .Another record with location name '" +
              duplicateLocationWithId?.locationName +
              "' also has same locationId in the uploaded file " +
              "\n"
          );
        }
      }
    }
    if (location.locationName == null || location.locationName.length == 0) {
      errors.push("Location Name can not be empty.\n");
    }
    if (location.effectiveDate == null || location.effectiveDate.length == 0) {
      errors.push("Effective Date can not be empty.\n");
    }
    if (!moment(location.effectiveDate, "DD/MM/YYYY").isValid()) {
      errors.push("Invalid Effective Date");
    }
    if (location.address == null || location.address.length == 0) {
      errors.push("Address can not be empty.\n");
    }
    if (location.city == null || location.city.length == 0) {
      errors.push("City can not be empty.\n");
    }
    if (location.country == null || location.country.length == 0) {
      errors.push("Country can not be empty.\n");
    }
    if (location.state == null || location.state.length == 0) {
      errors.push("State can not be empty.\n");
    }
    if (location.pin == null || location.pin.length == 0) {
      errors.push("Pin can not be empty.\n");
    }
    if (location.isPTApplicable != null && location.isPTApplicable.length > 0) {
      if (
        !(
          location.isPTApplicable.toLowerCase() === "true".toLowerCase() ||
          location.isPTApplicable.toLowerCase() === "false".toLowerCase()
        )
      ) {
        errors.push(
          "Invalid Is PT Applicable.It should be either true or false.\n"
        );
      }
    }
    if (location.ESIApplicable != null && location.ESIApplicable.length > 0) {
      if (
        !(
          location.ESIApplicable.toLowerCase() === "true".toLowerCase() ||
          location.ESIApplicable.toLowerCase() === "false".toLowerCase()
        )
      ) {
        errors.push(
          "Invalid ESI Applicable.It should be either true or false.\n"
        );
      }
    }
    if (
      location.isProcessingHub != null &&
      location.isProcessingHub.length > 0
    ) {
      if (
        !(
          location.isProcessingHub.toLowerCase() === "true".toLowerCase() ||
          location.isProcessingHub.toLowerCase() === "false".toLowerCase()
        )
      ) {
        errors.push(
          "Invalid Is Processing Hub.It should be either true or false.\n"
        );
      }
    }
    if (
      location.ESIStartDate &&
      !moment(location.ESIStartDate, "DD/MM/YYYY").isValid()
    ) {
      errors.push("Invalid ESI Start Date");
    }
    if (
      location.TANRegisteredDate &&
      !moment(location.TANRegisteredDate, "DD/MM/YYYY").isValid()
    ) {
      errors.push("Invalid TAN Registered Date");
    }
    for (let index = 0; index < location.departmentList.length; index++) {
      const departmentId = location.departmentList[index];
      const existingDepartmentWithId = allDepartments.find(
        (dept) => dept.id == departmentId
      );
      if (!existingDepartmentWithId) {
        errors.push(
          "Department does not exist with the id '" + departmentId + "'\n"
        );
      }
    }
    return errors;
  };
}
module.exports = new LocationUtils();
