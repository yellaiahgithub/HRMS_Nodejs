var moment = require("moment"); // require

class EmployeeUtils {
    constructor() { }
    validateEmployee = async (
        employee,
        uploadingData,
        isAutoGeneratedEmployeeId,
        allDepartments,
        allLocations,
        allDesignations,
        allEmployees,
        allReasons
    ) => {
        let errors = [];
        const hodTypeList = [
            { value: "None" },
            { value: "Employee" },
            { value: "Designation" },
        ];
        if (isAutoGeneratedEmployeeId &&  employee.id.length == 0) {
            errors.push("Employee Id can not be empty.  ");
        }
        if (employee.firstName == null || employee.firstName.length == 0) {
            errors.push("Employee firstName can not be empty.  ");
        }
        if (employee.lastName == null || employee.lastName.length == 0) {
            errors.push("Employee lastName can not be empty.  ");
        }
        if (employee.jobType == null || employee.jobType.length == 0) {
            errors.push("Employee JobType can not be empty.  ");
        }
        if (employee.jobStatus == null || employee.jobStatus.length == 0) {
            errors.push("Employee JobStatus can not be empty.  ");
        }
        if (employee.fatherOrHusband == null || employee.fatherOrHusband.length == 0) {
            errors.push("Employee fatherOrHusband can not be empty.  ");
        }
        if (employee.fatherOrHusbandName == null || employee.fatherOrHusbandName.length == 0) {
            errors.push("Employee fatherOrHusbandName can not be empty.  ");
        }

        if (employee.dob == null || employee.dob.length == 0) {
            errors.push("Date of Birth can not be empty. ");
        }
        if (!moment(employee.dob, "YYYY-MM-DDT00:00:00.000Z").isValid()) {
            errors.push("Invalid Date of Birth ");
        }
        if (employee.celebratesOn == null || employee.celebratesOn.length == 0) {
            errors.push("Celebrates On can not be empty.  ");
        }
        if (!moment(employee.celebratesOn, "YYYY-MM-DDT00:00:00.000Z").isValid()) {
            errors.push("Invalid Date of Celebrates On");
        }
        if (employee.birthCountry == null || employee.birthCountry.length == 0) {
            errors.push("Birth Country can not be empty.  ");
        }
        if (employee.birthState == null || employee.birthState.length == 0) {
            errors.push("Birth State can not be empty.  ");
        }
        if (employee.birthPlace == null || employee.birthPlace.length == 0) {
            errors.push("Birth Place can not be empty.  ");
        }
        if (employee.gender == null || employee.gender.length == 0) {
            errors.push("Gender can not be empty.  ");
        }
        if (employee.maritalStatus == null || employee.maritalStatus.length == 0) {
            errors.push("Marital Status can not be empty.  ");
        }
        if (employee.hireDate == null || employee.hireDate.length == 0) {
            errors.push("Hire Date can not be empty.  ");
        }

        if (!allLocations.find(l => l.locationId == employee.location)) {
            errors.push(
                "Location does not exist with the locationId '" + employee.location + "'.  "
            );
        }
        if (!allDepartments.find(l => l.id == employee.department)) {
            errors.push(
                "Department does not exist with the departmentId '" + employee.department + "'.  "
            );
        }
        if (!allDesignations.find(l => l.id == employee.designation)) {
            errors.push(
                "Designation does not exist with the designationId '" + employee.designation + "'.  "
            );
        }
        if (!allEmployees.find(l => l.id == employee.managerUUID)) {
            errors.push(
                "Manager does not exist with the managerId " + employee.managerUUID + ". "
            );
        }
        if (employee.reasonForHire == null || employee.reasonForHire.length == 0) {
            errors.push("Reason For Hire can not be empty. ");
        }
        if (!allReasons.find(l => l.reasonCode == employee.reasonForHire)) {
            errors.push(
                "Reason does not exist with the reasonCode '" + employee.reasonForHire + "'. "
            );
        }
        return errors;
    };

    validateEmployeeImage = async (
        file,
        employee,
        allEmployees,
        
    ) => {
        let errors = [];
        
        if (file?.name == null || file?.name?.length == 0) {
            errors.push("file can not be empty. ");
        }else{
            if ( employee?.employeeId?.length == 0) {
                errors.push("Employee Id can not be empty.  ");
            }
            else if (!allEmployees.find(l => l.id == employee.employeeId)) {
                errors.push(
                    "Employee does not exist with the employeeId " + employee.employeeId + ". "
                );
            }      
        }
        
        return errors;
    };

    validateEmployeeManager = async (
        employee,
        allEmployees,
        allReasons,
        allActions,
        
    ) => {
        let errors = [];
        if ( employee?.employeeId?.length == 0) {
            errors.push("Employee Id can not be empty.  ");
        }
        else if (!allEmployees.find(l => l.id == employee.employeeId)) {
            errors.push(
                "Employee does not exist with the employeeId " + employee.employeeId + ". "
            );
        }  
        if (!allEmployees.find(l => l.id == employee.managerId)) {
            errors.push(
                "Manager does not exist with the managerId " + employee.managerId + ". "
            );
        }
        if (employee.actionCode == null || employee.actionCode.length == 0) {
            errors.push("Action can not be empty. ");
        }
        if (!allActions.find(l => l.actionCode == employee.actionCode)) {
            errors.push(
                "Action does not exist with the actionCode '" + employee.actionCode + "'. "
            );
        }
        if (employee.actionReason == null || employee.actionReason.length == 0) {
            errors.push("actionReason can not be empty. ");
        } else
        if (!allReasons.find(l => l.reasonCode == employee.actionReason)) {
            errors.push(
                "Action Reason does not exist with the reasonCode '" + employee.actionReason + "'. "
            );
        }
        if (!moment(employee.effectiveDate, "YYYY-MM-DDT00:00:00.000Z").isValid()) {
            errors.push("Invalid effective Date");
        }
        
        if(employee?.managerId == employee?.employeeId) {
            throw new Error("Employee can't be his manager");
        }

        if(employee.managerId) {
            const reportees = allEmployees.find(m =>m.id == employee.employeeId);  
            if(reportees && reportees.find(r =>r?.id == employee.managerId)) {
            throw new Error("Reporter" + employee.managerId + "can't be Employee's Manager");
            }
        }
        
        return errors;
    };

}
module.exports = new EmployeeUtils();
