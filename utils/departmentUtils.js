var moment = require("moment"); // require

class DepartmentUtils {
  constructor() {}
  validateDepartment = async (
    department,
    uploadingData,
    isAutoGeneratedDepartmentId,
    allDepartments,
    allLocations,
    allDesignations,
    allEmployees,
    currentDepartmentIndex
  ) => {
    let errors = [];
    const hodTypeList = [
      { value: "None" },
      { value: "Employee" },
      { value: "Designation" },
    ];

    if (!isAutoGeneratedDepartmentId) {
      if (department.id == null || department.id.length == 0) {
        errors.push("Department Id can not be empty.\n");
      } else {
        const existingDepartmentWithId = allDepartments.find(
          (dept) => dept.id === department.id
        );
        const duplicateDepartmentWithId = uploadingData.find(
          (dept, index) =>
            dept.id === department.id && currentDepartmentIndex != index
        );
        if (existingDepartmentWithId) {
          errors.push(
            "Department Id '" +
              department.id +
              "' already alloted to department '" +
              existingDepartmentWithId?.name +
              "'\n"
          );
        }
        if (duplicateDepartmentWithId) {
          errors.push(
            "Duplicate Department Id '" +
              department.id +
              "' .Another record with department name '" +
              duplicateDepartmentWithId?.name +
              "' also has same departmentId in the uploaded file " +
              "\n"
          );
        }
      }
    }
    if (department.name == null || department.name.length == 0) {
      errors.push("Department Name can not be empty.\n");
    }
    if (department.hodType == null || department.hodType.length == 0) {
      errors.push("Hod Type can not be empty.\n");
    } else if (
      !hodTypeList.find(
        (hodType) =>
          hodType.value.toLowerCase() === department.hodType.toLowerCase()
      )
    ) {
      errors.push('Hod Type should be "NONE" OR "Employee" OR "Designation"\n');
    } else {
      if (department.hodType.toLowerCase() === "None".toLowerCase()) {
        if (department.employeeId != null && department.employeeId.length > 0) {
          errors.push('Employee Id should be Empty.Since Hod Type is "NONE"\n');
        }
        if (department.jobId != null && department.jobId.length > 0) {
          errors.push('Job Id should be Empty.Since Hod Type is "NONE"\n');
        }
      }
      if (department.hodType.toLowerCase() === "Employee".toLowerCase()) {
        if (
          department.employeeId == null ||
          department.employeeId.length == 0
        ) {
          errors.push(
            'Employee Id should Not Empty.Since Hod Type is "Employee"\n'
          );
        } else {
          const existingEmployeeWithId = allEmployees.find(
            (emp) => emp.id === department.employeeId
          );
          if (!existingEmployeeWithId) {
            errors.push(
              "Employee does not exist with the employeeId '" +
                department.employeeId +
                "'\n"
            );
          }
        }
        if (department.jobId != null && department.jobId.length > 0) {
          errors.push('Job Id should be Empty.Since Hod Type is "Employee"\n');
        }
      }
      if (department.hodType.toLowerCase() === "Designation".toLowerCase()) {
        if (department.jobId == null || department.jobId.length == 0) {
          errors.push(
            'Job Id should Not Empty.Since Hod Type is "Designation"\n'
          );
        } else {
          const existingDesignationWithId = allDesignations.find(
            (designation) => designation.id === department.jobId
          );
          if (!existingDesignationWithId) {
            errors.push(
              "One To One Designation does not exist with the jobId '" +
                department.jobId +
                "'\n"
            );
          }
        }
        if (department.employeeId != null && department.employeeId.length > 0) {
          errors.push(
            'Employee Id should be Empty.Since Hod Type is "Designation"\n'
          );
        }
      }
    }

    if (department.asOfDate == null || department.asOfDate.length == 0) {
      errors.push("As of Date can not be empty.\n");
    }
    if (!moment(department.asOfDate, "DD/MM/YYYY").isValid()) {
      errors.push("Invalid As Of Date");
    }
    for (let index = 0; index < department.locationsList.length; index++) {
      const locationId = department.locationsList[index];
      const existingLocationWithId = allLocations.find(
        (loc) => loc.locationId == locationId
      );
      if (!existingLocationWithId) {
        errors.push(
          "Location does not exist with the locationId '" + locationId + "'\n"
        );
      }
    }
    return errors;
  };
}
module.exports = new DepartmentUtils();
